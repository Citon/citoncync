#!/bin/bash

# 2013 Citon Computer Corporation
# Author: Paul Hirsch <paul.hirsch@citon.com>

# citoncync-lib - Common functions for client scripts.  This should
#                 be called from a launch/config script named
#                 citoncync that sets our config variables then
#                 calls our main() function

USAGE="
$MYSCRIPT - Use RSync over SSH to replicate to offsite storage

Usage:

 $MYSCRIPT {replicate|speedtest|showconfig|schedule}

replicate - Sync to remote replication target
speedtest - Run basic speedtest over SSH and print results
showconfig - Show current configuration
schedule - Install/update crontab entry

"

# Our date function of choice - Spits out RFC3339 happy time
DATESTAMP='date +%Y-%m-%dT%H:%M:%S%z'

# The RSync filter file - Always under SCRIPTBASE/rsync-filter
RSYNCFILTER="${SCRIPTBASE}/rsync-filter"

# Set the size of our bandwidth test file in KB.  This is uploaded to the
# far size to VERY roughly estimate bandwidth as set our rate limiting.
# 1024KB (1MB) should take about 10 seconds on a slow broadband link. (512Kbps)
# That should limit our impact on everything except dialup.  Sorry modem users.
SPEEDTESTSIZE=1024

# Set RATEKBPS to empty - We will not use it if it fails or if the speed
# is too high to calculate using our sweet bandwidth tester
RATEKBPS=""


# The time to wait in seconds between retries
HOLDTIME=60


# Set an upper limit on retries per replication per run.  It is good to be
# robust but not futile. Remember we wait HOLDTIME seconds between retries.
MAXRETRIES=60


# Display the current configuration and creates/displays SSH public key
show_config() {
    echo "* Current configuration for $0:"
    echo
    for i in SCRIPTBASE SOURCEBASE DESTHOST DESTPORT DESTUSER DESTBASE SPEEDPERCENT SCHEDULE SYNCOPTS LOGFILE LOGKEEP CRONTAB CRONRESTART; do
	# Sure it looks odd but this is how we display the vals without globbing
	eval echo ${i} = \"\$$i\"
    done
    echo "SOURCES =" ${SOURCES[@]}
    
    echo
    echo "* Checking SSH keypair"
    show_keypair
}


# Generate a new SSH keypair
generate_keypair() {
    if [ ! -d ${SCRIPTBASE} ]; then
	echo "FATAL: ${SCRIPTBASE} does not exist or is not a directory!"
	exit 1
    fi

    ssh-keygen -b 2048 -C "${DESTUSER}@`hostname`" -q -t rsa -N "" -f ${SCRIPTBASE}/${DESTUSER}_id_rsa
}


# Check SSH key and display public key
show_keypair() {
    if [ ! -f ${SCRIPTBASE}/${DESTUSER}_id_rsa ]; then
	echo "Missing SSH keypair - Generating ${SCRIPTBASE}/${DESTUSER}_id_rsa keypair"
	generate_keypair
    fi
    echo
    echo "* Displaying public SSH key for ${DESTUSER}"
    echo 
    echo "  (Copy the text between the -- CUT HERE-- marks into the remote user"
    echo "  authorized_keys file to allow automatic login)"
    echo "-------- CUT HERE --------------"
    cat ${SCRIPTBASE}/${DESTUSER}_id_rsa.pub
    echo "-------- CUT HERE --------------"
}


# Install our custom crontab entry and create (if needed) then display
# our public SSH key
do_schedule() {
    if [ "X${CRONTAB}" = "X" ]; then
	echo "CRONTAB not set - Skipping scheduling"
    else
	echo "* Adding/replacing our crontab entry"
	if [ ! -f "${CRONTAB}" ]; then
	    echo "FATAL: Can not find CRONTAB file ${CRONTAB}"
	    exit 1
	fi
	
        # Remove our existing line
	CRONTEXT=`cat ${CRONTAB} | grep -v ${MYSCRIPT}`
	
        # Overwrite the crontab with a clean version
	echo "${CRONTEXT}" > ${CRONTAB}

        # Append out scheduling line
        echo "${SCHEDULE} ${SCRIPTBASE}/${MYSCRIPT}" >> ${CRONTAB}

        # Show the tab
        echo "Your current ${CRONTAB} is now:"
        cat ${CRONTAB}

	echo
	echo

	# Restart cron if a command is defined
	if [ "X${CRONRESTART}" != "X" ]; then
	    echo "Attempting to reload crontab"
	    eval ${CRONRESTART}
	fi
    fi
}


# Shift the logs up
rotate_logs() {
    # Try to extract the log parent diectory name
    LOGBASE=`echo ${LOGFILE} | sed 's/\/[^\/]\+$//'`

    # If there IS a subdirectory and it does not exist...
    if [ X${LOGFILE} != X${LOGBASE} -a ! -d ${LOGBASE} ]; then 
	if [ X${LOGBASE} = X${SCRIPTBASE}/log ]; then
	    mkdir -p ${LOGBASE}
	else
	    echo "FATAL: No place to put ${LOGFILE} - Missing ${LOGBASE}!"
	    exit 1
	fi
    fi
    
    # Cycle through old logs and bump them up
    for ((i=${LOGKEEP}; $i > 0; i=$i - 1)); do
	j=$(( $i - 1 ))
	if [ -f ${LOGFILE}.${j} ]; then
	    mv -f ${LOGFILE}.${j} ${LOGFILE}.${i}
	fi
    done

    # Backup the last log to .0
    if [ -f ${LOGFILE} ]; then
	mv -f ${LOGFILE} ${LOGFILE}.0
    fi
}


# Very lame speed test.  Kinda quick but mostly filthy.  Pushes ${SPEEDTESTSIZE}
# KB of data to the destination over SSH with compression disabled.  Using
# time on the destination side (so we ignore SSH setup time), we calculate
# the rough bandwidth then set RATEKBPS to be RATEAVERAGE percent of the
# measured speed, in KBps
do_ratecalc() {
    # One pipeline to rule them - This uses /dev/zero as a source for
    # data then pipes it into ssh with compression off (so our strings of 0s
    # take full size on the line). On the destination side we time only the
    # dumping of data into our temp/test file.  The return from time then is
    # run through sed to collect milliseconds.  (Bash time returns ms...)
    MSECS=$( dd if=/dev/zero bs=1024 count=${SPEEDTESTSIZE} 2>/dev/null | \
	ssh -o Compression=no -i"${SCRIPTBASE}/${DESTUSER}_id_rsa" \
	-p ${DESTPORT} ${DESTUSER}@${DESTHOST} \
	"time cat > ${DESTBASE}/.citoncync-bwtest; echo '' > ${DESTBASE}/.citoncync-bwtest" 2>&1 | \
	grep real | sed 's/^real.\+[0-9]\+m\([0-9]\+\)\.\([0-9]\+\).*$/\1\2/' | \
	sed 's/^0\+//' )
    if [ X$MSECS = "X" ]; then
	# Something went wrong - Bail
	echo "WARNING: Speedtest failed - Run the following to diagnose:"
	echo " 	ssh -o Compression=no -i\"${SCRIPTBASE}/${DESTUSER}_id_rsa\" -p ${DESTPORT} ${DESTUSER}@${DESTHOST} \"time cat > ${DESTBASE}/.citoncync-bwtest; rm ${DESTBASE}/.citoncync-bwtest\""
    else
        # Now calculate our Bps rate - We want a big number so bash's integer math
        # doesn't beat all the precision out of it.
	BPS=$(( (${SPEEDTESTSIZE} * 1024 * 1000) / ${MSECS} ))
	
        # And finally, our KBps rate to set based on the percentage of BPS we want
	RATEKBPS=$(( (${SPEEDPERCENT} * ${BPS}) / 102400 ))
    fi
}


# Locking - A necessary evil to prevent pile ups if replication takes too long
# Uses the semi-reliable noclobber method (see
# http://stackoverflow.com/a/4936722/383002)  Since replicate should not be
# called in a tight loop it should be good enough for our purposes.
popnlock() {
    if (set -o noclobber; echo "$$" > "${SCRIPTBASE}/.${MYSCRIPT}.pid") 2> /dev/null; then
	trap 'rm -f "${SCRIPTBASE}/.${MYSCRIPT}.pid"; exit $?' INT TERM EXIT
    else
	echo `${DATESTAMP}` "Previous instance running - .${MYSCRIPT}.pid with live pid. Exiting." >> ${LOGFILE}
	exit 1
    fi
}


# Unlock
popunlock() {
    rm -f "${SCRIPTBASE}/.${MYSCRIPT}.pid"
    trap - INT TERM EXIT
}

# Replicate!
do_replicate() {
    # Attempt to lock before rotating logs - popnlock() will kill the script
    # if it fails
    popnlock

    rotate_logs
    echo `${DATESTAMP}` "Starting replication to ${DESTUSER}@${DESTHOST}:${DESTBASE}" > ${LOGFILE}

    # <SARCASM>Run the world's most awesome bandwidth test!</SARCASM>
    do_ratecalc

    # If we have a average rate limit calculated, add it
    if [ X${RATEKBPS} != "X" ]; then
	echo `${DATESTAMP}` "Setting upload rate to $(( ${RATEKBPS} * 8 ))Kbps  (${SPEEDPERCENT}% of measured)" >> ${LOGFILE}
	SYNCOPTS="${SYNCOPTS} --bwlimit=${RATEKBPS}"
    else
	echo `${DATESTAMP}` "Unable to estimate bandwidth.  Rate average not set." >> ${LOGFILE}
    fi

    # Cycle through sources and replicate them
    for source in ${SOURCES[@]}; do	
	echo `${DATESTAMP}` "Replicating ${SOURCEBASE}/${source} to ${DESTHOST}:${DESTBASE}/${source}" >> ${LOGFILE}

	# Sync it (using a semi-reliable retry system)
	do_rsync ${source}
    done

    echo `${DATESTAMP}` "End data replication" >> ${LOGFILE}

    # Now we sync the SCRIPTBASE directory, including logs, to .citoncync/
    rsync ${SYNCOPTS} -e "ssh -i ${SCRIPTBASE}/${DESTUSER}_id_rsa -p ${DESTPORT} -l ${DESTUSER}" \
	--filter=". ${SCRIPTBASE}/rsync-filter" \
	${SCRIPTBASE}/ ${DESTHOST}:${DESTBASE}/.citoncync/ >> ${LOGFILE} 2>&1

    echo `${DATESTAMP}` "End metadata and script replication" >> ${LOGFILE}

    # Clear the lock
    popunlock
}


# Now for the MAGIC!  The whole reason for all this.  Replication.
# The --stats flag is added so we get detailed transfer stats for
# data.  It is left out for the metadata/script transfer.
do_rsync() {
    SRC=${1}
    RCODE=255
    RTRY=0

    while [ X${RCODE} != "X0" -a X${RTRY} != X${MAXRETRIES} ]; do
	RTRY=$(( ${RTRY} + 1 ))
	
	rsync ${SYNCOPTS} --stats -e "ssh -i ${SCRIPTBASE}/${DESTUSER}_id_rsa -p ${DESTPORT} -l ${DESTUSER}" \
	    --filter=". ${SCRIPTBASE}/rsync-filter" \
	    ${SOURCEBASE}/${SRC} ${DESTHOST}:${DESTBASE}/ >> ${LOGFILE} 2>&1

	RCODE=$?

	if [ X$RCODE = "X0" ]; then
	    # It actually completed cleanly - Go figure!
	    echo `${DATESTAMP}` "Replication of ${SRC} completed normally" >> ${LOGFILE}
	elif echo $? | egrep '^(10|11|12|23|24|30)$'; then
            # Exited with one of the codes we want to retry on.  They are:
            #       10     Error in socket I/O
            #       11     Error in file I/O
            #       12     Error in rsync protocol data stream
            #       23     Partial transfer due to error
            #       24     Partial transfer due to vanished source files
            #       30     Timeout in data send/receive
	    echo `${DATESTAMP}` "(Attempt ${RTRY}) Replication of ${SRC} terminated early with code ${RCODE} - Will retry after ${HOLDTIME} seconds." >> ${LOGFILE}
	    sleep ${HOLDTIME}

	else
	    # Bad exit code.  Bad.
	    echo `${DATESTAMP}` "(Attempt ${RTRY}) Replication of ${SRC} terminated early with code ${RCODE} - Not a retryable error.  Aborting"
	    
	    # Break out.
	    RCODE=0
	fi
    done
}


# Run it!
main() {
    case "$1" in
	replicate)
	    do_replicate
	    ;;
	
	speedtest)
	    do_ratecalc
	    echo "Upload speed test results for destination  ${DESTHOST}"
	    echo
	    echo "Measured Upload Speed:" $(( (8 * ${BPS}) / 1024 ))Kbps
	    echo "Speed Percent Setting : ${SPEEDPERCENT}%"
	    echo "Calculated Rate Limit for Replication:" $(( 8 * ${RATEKBPS} ))Kbps
	    echo
	    ;;
	
	showconfig)
	    show_config
	    ;;
	
	schedule)
	    do_schedule
	    ;;
	
	*)
	    echo "${USAGE}"
	    ;;
    esac
    
    exit 0
}

